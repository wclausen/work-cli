// Code generated by moshi-kotlin-codegen. Do not edit.
package com.wclausen.work.jira.api.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class IssueFieldsJsonAdapter(
  moshi: Moshi
) : JsonAdapter<IssueFields>() {
  private val options: JsonReader.Options = JsonReader.Options.of("summary", "project", "issuetype")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "summary")

  private val jiraProjectIdAdapter: JsonAdapter<JiraProjectId> =
      moshi.adapter(JiraProjectId::class.java, emptySet(), "project")

  private val jiraIssueTypeAdapter: JsonAdapter<JiraIssueType> =
      moshi.adapter(JiraIssueType::class.java, emptySet(), "issuetype")

  override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("IssueFields").append(')') }

  override fun fromJson(reader: JsonReader): IssueFields {
    var summary: String? = null
    var project: JiraProjectId? = null
    var issuetype: JiraIssueType? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> summary = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("summary",
            "summary", reader)
        1 -> project = jiraProjectIdAdapter.fromJson(reader) ?: throw Util.unexpectedNull("project",
            "project", reader)
        2 -> issuetype = jiraIssueTypeAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("issuetype", "issuetype", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return IssueFields(
        summary = summary ?: throw Util.missingProperty("summary", "summary", reader),
        project = project ?: throw Util.missingProperty("project", "project", reader),
        issuetype = issuetype ?: throw Util.missingProperty("issuetype", "issuetype", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: IssueFields?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("summary")
    stringAdapter.toJson(writer, value.summary)
    writer.name("project")
    jiraProjectIdAdapter.toJson(writer, value.project)
    writer.name("issuetype")
    jiraIssueTypeAdapter.toJson(writer, value.issuetype)
    writer.endObject()
  }
}
