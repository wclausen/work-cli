// Code generated by moshi-kotlin-codegen. Do not edit.
package com.wclausen.work.config

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class JiraConfigJsonAdapter(
  moshi: Moshi
) : JsonAdapter<JiraConfig>() {
  private val options: JsonReader.Options = JsonReader.Options.of("jira_email", "jira_api_token")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "jira_email")

  override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("JiraConfig").append(')') }

  override fun fromJson(reader: JsonReader): JiraConfig {
    var jira_email: String? = null
    var jira_api_token: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> jira_email = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("jira_email",
            "jira_email", reader)
        1 -> jira_api_token = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("jira_api_token", "jira_api_token", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return JiraConfig(
        jira_email = jira_email ?: throw Util.missingProperty("jira_email", "jira_email", reader),
        jira_api_token = jira_api_token ?: throw Util.missingProperty("jira_api_token",
            "jira_api_token", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: JiraConfig?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("jira_email")
    stringAdapter.toJson(writer, value.jira_email)
    writer.name("jira_api_token")
    stringAdapter.toJson(writer, value.jira_api_token)
    writer.endObject()
  }
}
