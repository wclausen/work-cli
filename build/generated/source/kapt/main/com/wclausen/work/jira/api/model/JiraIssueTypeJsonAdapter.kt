// Code generated by moshi-kotlin-codegen. Do not edit.
package com.wclausen.work.jira.api.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class JiraIssueTypeJsonAdapter(
  moshi: Moshi
) : JsonAdapter<JiraIssueType>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id")

  private val jiraIssueTypeIdAdapter: JsonAdapter<JiraIssueTypeId> =
      moshi.adapter(JiraIssueTypeId::class.java, emptySet(), "id")

  override fun toString(): String = buildString(35) {
      append("GeneratedJsonAdapter(").append("JiraIssueType").append(')') }

  override fun fromJson(reader: JsonReader): JiraIssueType {
    var id: JiraIssueTypeId? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = jiraIssueTypeIdAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return JiraIssueType(
        id = id ?: throw Util.missingProperty("id", "id", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: JiraIssueType?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    jiraIssueTypeIdAdapter.toJson(writer, value.id)
    writer.endObject()
  }
}
